% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOPMIDAS.R
\name{PipeOpMIDAS}
\alias{PipeOpMIDAS}
\title{PipeOpMIDAS}
\description{
Implements Multiple Imputation using Denoising Autoencoders method as mlr3 pipeline more about MIDAS \code{\link{rMIDAS}}
}
\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link{PipeOpImpute}}.
}

\section{Parameters}{

The parameters include inherited from [`PipeOpImpute`], as well as: \cr
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"imput_MIDAS_HD"}.
\item \code{path} :: \code{character(1)}\cr
character string, path to python binary if type == "auto", path to virtualenv if type == "virtualenv", or the name of a Conda environment if type=="condaenv". Default \code{'impute'}.
\item \code{type} :: \code{character(1)}\cr
character string, one of 'auto' (for python binary),'virtualenv', or 'condaenv'. Default \code{'condaenv'} .
\item \code{training_epchos} :: \code{integer(1)}\cr
An integer, indicating the number of forward passes to conduct when running the model. Default \code{10}.
\item \code{layer_structure} :: \code{integer(1)}\cr
A vector of integers, The number of nodes in each layer of the network (default = c(256, 256, 256), denoting a three-layer network with 256 nodes per layer). Larger networks can learn more complex data structures but require longer training and are more prone to overfitting.
\item \code{seed} :: \code{integer(1)}\cr
Random seed
\item \code{learn_rate} :: \code{integer(1)}\cr
A number, the learning rate Î³ (default = 0.0001), which controls the size of the weight adjustment in each training epoch. In general, higher values reduce training time at the expense of less accurate results.
}
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpImpute]{mlr3pipelines::PipeOpImpute}} -> \code{MIDAS_imputation}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PipeOpMIDAS$new()}}
\item \href{#method-clone}{\code{PipeOpMIDAS$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict">}\href{../../mlr3pipelines/html/PipeOp.html#method-predict}{\code{mlr3pipelines::PipeOp$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print">}\href{../../mlr3pipelines/html/PipeOp.html#method-print}{\code{mlr3pipelines::PipeOp$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train">}\href{../../mlr3pipelines/html/PipeOp.html#method-train}{\code{mlr3pipelines::PipeOp$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpMIDAS$new(
  id = "impute_MIDAS_B",
  path = "impute",
  type = "condaenv",
  training_epchos = 10L,
  layer_structure = c(256, 256, 256),
  seed = 123,
  learn_rate = 4e-04
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpMIDAS$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
