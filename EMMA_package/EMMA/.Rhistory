?autotune_missForest
document()
document()
?autotune_missForest
document()
test =PipeOpmissForest$new(
)
test =PipeOpmissForest$new()
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/PipeOPmissForest.R', echo=TRUE)
super$initialize(id, param_vals = list(cores =cores,ntree_set =ntree_set,mtry_set=mtry_set,parallel=parallel,
turn_off_parallel=turn_off_parallel,col_0_1=col_0_1,mtry=mtry,ntree=ntree,optimize=optimize),
param_set= ParamSet$new(list(
'ntree'=ParamUty$new('ntree', default = c(100,200,500,1000), tags = 'missForest'),
'cores'=ParamUty$new('cores',default = NULL,tags='missForest'),
'ntry_set'=ParamUty$new('ntry_set',default = NULL,tags='missForest'),
'parallel'=ParamLgl$new('parallel',default = TRUE,tags = 'missForest'),
'turn_off_parallel'=ParamLgl$new('turn_off_parallel',default = FALSE,tags='missForest'),
'col_0_1'=ParamLgl$new('col_0_1',default = F,tags='missForest'),
'mtry'=ParamUty$new('mtry',default = NULL,tags='missForest'),
'ntree'=ParamInt$new('ntree',lower = 10,upper = Inf,default = 100,tags='missForest'),
'optimize'=ParamLgl$new('optimize',default = TRUE,tags='missForest')
)),
# declare "input" and "output" during construction here
# training and prediction take task and return task with imputed data ;
input = data.table::data.table(name = "input",
train = "Task", predict = 'Task'),
output = data.table::data.table(name = "output",
train = "Task", predict = "Task")
)
PipeOpmissForest <-  R6::R6Class("missForest_imputation",lock_objects=FALSE,
inherit = PipeOp,  # inherit from PipeOp
public = list(
initialize = function(id = "imput_missForest", cores=NULL,ntree_set=c(100,200,500,1000),mtry_set=NULL,parallel=TRUE,
turn_off_parallel=FALSE,col_0_1=FALSE,mtry=NULL,ntree=100,optimize=TRUE
) {
super$initialize(id, param_vals = list(cores =cores,ntree_set =ntree_set,mtry_set=mtry_set,parallel=parallel,
turn_off_parallel=turn_off_parallel,col_0_1=col_0_1,mtry=mtry,ntree=ntree,optimize=optimize),
param_set= ParamSet$new(list(
'ntree'=ParamUty$new('ntree', default = c(100,200,500,1000), tags = 'missForest'),
'cores'=ParamUty$new('cores',default = NULL,tags='missForest'),
'ntry_set'=ParamUty$new('ntry_set',default = NULL,tags='missForest'),
'parallel'=ParamLgl$new('parallel',default = TRUE,tags = 'missForest'),
'turn_off_parallel'=ParamLgl$new('turn_off_parallel',default = FALSE,tags='missForest'),
'col_0_1'=ParamLgl$new('col_0_1',default = F,tags='missForest'),
'mtry'=ParamUty$new('mtry',default = NULL,tags='missForest'),
'ntree'=ParamInt$new('ntree',lower = 10,upper = Inf,default = 100,tags='missForest'),
'optimize'=ParamLgl$new('optimize',default = TRUE,tags='missForest')
)),
# declare "input" and "output" during construction here
# training and prediction take task and return task with imputed data ;
input = data.table::data.table(name = "input",
train = "Task", predict = 'Task'),
output = data.table::data.table(name = "output",
train = "Task", predict = "Task")
)
},
# PipeOp deriving classes must implement train_internal and
# predict_internal; each taking an input list and returning
# a list as output.
train_internal = function(input) {
data_to_impute <- as.data.frame(input[[1]]$data())
target_col <- data_to_impute[,input[[1]]$target_names]
data_to_impute <- data_to_impute[,ifelse(colnames(data_to_impute)==input[[1]]$target_names,FALSE,TRUE)]
# prepering arguments for function
col_type <- 1:ncol(data_to_impute)
for (i in col_type){
col_type[i] <- class(data_to_impute[,i])
}
percent_of_missing <- 1:ncol(data_to_impute)
for (i in percent_of_missing){
percent_of_missing[i] <- (sum(is.na(data_to_impute[,i]))/length(data_to_impute[,1]))*100
}
data_imputed <- autotune_missForest(data_to_impute,percent_of_missing = percent_of_missing,cores = self$param_set$values$cores,
ntree_set = self$param_set$values$ntree_set,mtry_set = self$param_set$values$mtry_set,
parallel = self$param_set$values$parallel,turn_off_parallel = self$param_set$values$turn_off_parallel,
col_0_1 = self$param_set$values$col_0_1,optimize = self$param_set$values$optimize,
ntree = self$param_set$values$ntree,mtry = self$param_set$values$mtry)
data_imputed <- cbind(data_imputed,target_col)
colnames(data_imputed)[ncol(data_imputed)] <- input[[1]]$target_names
if (input[[1]]$task_type=='classif'){
input[[1]] <- TaskClassif$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
if ( input[[1]]$task_type=='regr'){
input[[1]] <- TaskRegrf$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
return(input)
},
predict_internal = function(input) {
data_to_impute <- as.data.frame(input[[1]]$data())
target_col <- data_to_impute[,input[[1]]$target_names]
data_to_impute <- data_to_impute[,ifelse(colnames(data_to_impute)==input[[1]]$target_names,FALSE,TRUE)]
# prepering arguments for function
col_type <- 1:ncol(data_to_impute)
for (i in col_type){
col_type[i] <- class(data_to_impute[,i])
}
percent_of_missing <- 1:ncol(data_to_impute)
for (i in percent_of_missing){
percent_of_missing[i] <- (sum(is.na(data_to_impute[,i]))/length(data_to_impute[,1]))*100
}
col_miss <- colnames(data_to_impute)[percent_of_missing>0]
col_no_miss <- colnames(data_to_impute)[percent_of_missing==0]
data_imputed <- autotune_missForest(data_to_impute,percent_of_missing = percent_of_missing,cores = self$param_set$values$cores,
ntree_set = self$param_set$values$ntree_set,mtry_set = self$param_set$values$mtry_set,
parallel = self$param_set$values$parallel,turn_off_parallel = self$param_set$values$turn_off_parallel,
col_0_1 = self$param_set$values$col_0_1,optimize = self$param_set$values$optimize,
ntree = self$param_set$values$ntree,mtry = self$param_set$values$mtry)
data_imputed <- cbind(data_imputed,target_col)
colnames(data_imputed)[ncol(data_imputed)] <- input[[1]]$target_names
if (input[[1]]$task_type=='classif'){
input[[1]] <- TaskClassif$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
if ( input[[1]]$task_type=='regr'){
input[[1]] <- TaskRegrf$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
return(input)
}
)
)
test =PipeOpmissForest$new()
PipeOpmissForest <-  R6::R6Class("missForest_imputation",lock_objects=FALSE,
inherit = PipeOp,  # inherit from PipeOp
public = list(
initialize = function(id = "imput_missForest", cores=NULL,ntree_set=c(100,200,500,1000),mtry_set=NULL,parallel=TRUE,
turn_off_parallel=FALSE,col_0_1=FALSE,mtry=NULL,ntree=100,optimize=TRUE
) {
super$initialize(id, param_vals = list(cores =cores,ntree_set =ntree_set,mtry_set=mtry_set,parallel=parallel,
turn_off_parallel=turn_off_parallel,col_0_1=col_0_1,mtry=mtry,ntree=ntree,optimize=optimize),
param_set= ParamSet$new(list(
'ntree_set'=ParamUty$new('ntree_set', default = c(100,200,500,1000), tags = 'missForest'),
'cores'=ParamUty$new('cores',default = NULL,tags='missForest'),
'ntry_set'=ParamUty$new('ntry_set',default = NULL,tags='missForest'),
'parallel'=ParamLgl$new('parallel',default = TRUE,tags = 'missForest'),
'turn_off_parallel'=ParamLgl$new('turn_off_parallel',default = FALSE,tags='missForest'),
'col_0_1'=ParamLgl$new('col_0_1',default = F,tags='missForest'),
'mtry'=ParamUty$new('mtry',default = NULL,tags='missForest'),
'ntree'=ParamInt$new('ntree',lower = 10,upper = Inf,default = 100,tags='missForest'),
'optimize'=ParamLgl$new('optimize',default = TRUE,tags='missForest')
)),
# declare "input" and "output" during construction here
# training and prediction take task and return task with imputed data ;
input = data.table::data.table(name = "input",
train = "Task", predict = 'Task'),
output = data.table::data.table(name = "output",
train = "Task", predict = "Task")
)
},
# PipeOp deriving classes must implement train_internal and
# predict_internal; each taking an input list and returning
# a list as output.
train_internal = function(input) {
data_to_impute <- as.data.frame(input[[1]]$data())
target_col <- data_to_impute[,input[[1]]$target_names]
data_to_impute <- data_to_impute[,ifelse(colnames(data_to_impute)==input[[1]]$target_names,FALSE,TRUE)]
# prepering arguments for function
col_type <- 1:ncol(data_to_impute)
for (i in col_type){
col_type[i] <- class(data_to_impute[,i])
}
percent_of_missing <- 1:ncol(data_to_impute)
for (i in percent_of_missing){
percent_of_missing[i] <- (sum(is.na(data_to_impute[,i]))/length(data_to_impute[,1]))*100
}
data_imputed <- autotune_missForest(data_to_impute,percent_of_missing = percent_of_missing,cores = self$param_set$values$cores,
ntree_set = self$param_set$values$ntree_set,mtry_set = self$param_set$values$mtry_set,
parallel = self$param_set$values$parallel,turn_off_parallel = self$param_set$values$turn_off_parallel,
col_0_1 = self$param_set$values$col_0_1,optimize = self$param_set$values$optimize,
ntree = self$param_set$values$ntree,mtry = self$param_set$values$mtry)
data_imputed <- cbind(data_imputed,target_col)
colnames(data_imputed)[ncol(data_imputed)] <- input[[1]]$target_names
if (input[[1]]$task_type=='classif'){
input[[1]] <- TaskClassif$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
if ( input[[1]]$task_type=='regr'){
input[[1]] <- TaskRegrf$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
return(input)
},
predict_internal = function(input) {
data_to_impute <- as.data.frame(input[[1]]$data())
target_col <- data_to_impute[,input[[1]]$target_names]
data_to_impute <- data_to_impute[,ifelse(colnames(data_to_impute)==input[[1]]$target_names,FALSE,TRUE)]
# prepering arguments for function
col_type <- 1:ncol(data_to_impute)
for (i in col_type){
col_type[i] <- class(data_to_impute[,i])
}
percent_of_missing <- 1:ncol(data_to_impute)
for (i in percent_of_missing){
percent_of_missing[i] <- (sum(is.na(data_to_impute[,i]))/length(data_to_impute[,1]))*100
}
col_miss <- colnames(data_to_impute)[percent_of_missing>0]
col_no_miss <- colnames(data_to_impute)[percent_of_missing==0]
data_imputed <- autotune_missForest(data_to_impute,percent_of_missing = percent_of_missing,cores = self$param_set$values$cores,
ntree_set = self$param_set$values$ntree_set,mtry_set = self$param_set$values$mtry_set,
parallel = self$param_set$values$parallel,turn_off_parallel = self$param_set$values$turn_off_parallel,
col_0_1 = self$param_set$values$col_0_1,optimize = self$param_set$values$optimize,
ntree = self$param_set$values$ntree,mtry = self$param_set$values$mtry)
data_imputed <- cbind(data_imputed,target_col)
colnames(data_imputed)[ncol(data_imputed)] <- input[[1]]$target_names
if (input[[1]]$task_type=='classif'){
input[[1]] <- TaskClassif$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
if ( input[[1]]$task_type=='regr'){
input[[1]] <- TaskRegrf$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
return(input)
}
)
)
test =PipeOpmissForest$new()
PipeOpmissForest <-  R6::R6Class("missForest_imputation",lock_objects=FALSE,
inherit = PipeOp,  # inherit from PipeOp
public = list(
initialize = function(id = "imput_missForest", cores=NULL,ntree_set=c(100,200,500,1000),mtry_set=NULL,parallel=TRUE,
turn_off_parallel=FALSE,col_0_1=FALSE,mtry=NULL,ntree=100,optimize=TRUE
) {
super$initialize(id, param_vals = list(cores =cores,ntree_set =ntree_set,mtry_set=mtry_set,parallel=parallel,
turn_off_parallel=turn_off_parallel,col_0_1=col_0_1,mtry=mtry,ntree=ntree,optimize=optimize),
param_set= ParamSet$new(list(
'ntree_set'=ParamUty$new('ntree_set', default = c(100,200,500,1000), tags = 'missForest'),
'cores'=ParamUty$new('cores',default = NULL,tags='missForest'),
'mtry_set'=ParamUty$new('mtry_set',default = NULL,tags='missForest'),
'parallel'=ParamLgl$new('parallel',default = TRUE,tags = 'missForest'),
'turn_off_parallel'=ParamLgl$new('turn_off_parallel',default = FALSE,tags='missForest'),
'col_0_1'=ParamLgl$new('col_0_1',default = F,tags='missForest'),
'mtry'=ParamUty$new('mtry',default = NULL,tags='missForest'),
'ntree'=ParamInt$new('ntree',lower = 10,upper = Inf,default = 100,tags='missForest'),
'optimize'=ParamLgl$new('optimize',default = TRUE,tags='missForest')
)),
# declare "input" and "output" during construction here
# training and prediction take task and return task with imputed data ;
input = data.table::data.table(name = "input",
train = "Task", predict = 'Task'),
output = data.table::data.table(name = "output",
train = "Task", predict = "Task")
)
},
# PipeOp deriving classes must implement train_internal and
# predict_internal; each taking an input list and returning
# a list as output.
train_internal = function(input) {
data_to_impute <- as.data.frame(input[[1]]$data())
target_col <- data_to_impute[,input[[1]]$target_names]
data_to_impute <- data_to_impute[,ifelse(colnames(data_to_impute)==input[[1]]$target_names,FALSE,TRUE)]
# prepering arguments for function
col_type <- 1:ncol(data_to_impute)
for (i in col_type){
col_type[i] <- class(data_to_impute[,i])
}
percent_of_missing <- 1:ncol(data_to_impute)
for (i in percent_of_missing){
percent_of_missing[i] <- (sum(is.na(data_to_impute[,i]))/length(data_to_impute[,1]))*100
}
data_imputed <- autotune_missForest(data_to_impute,percent_of_missing = percent_of_missing,cores = self$param_set$values$cores,
ntree_set = self$param_set$values$ntree_set,mtry_set = self$param_set$values$mtry_set,
parallel = self$param_set$values$parallel,turn_off_parallel = self$param_set$values$turn_off_parallel,
col_0_1 = self$param_set$values$col_0_1,optimize = self$param_set$values$optimize,
ntree = self$param_set$values$ntree,mtry = self$param_set$values$mtry)
data_imputed <- cbind(data_imputed,target_col)
colnames(data_imputed)[ncol(data_imputed)] <- input[[1]]$target_names
if (input[[1]]$task_type=='classif'){
input[[1]] <- TaskClassif$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
if ( input[[1]]$task_type=='regr'){
input[[1]] <- TaskRegrf$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
return(input)
},
predict_internal = function(input) {
data_to_impute <- as.data.frame(input[[1]]$data())
target_col <- data_to_impute[,input[[1]]$target_names]
data_to_impute <- data_to_impute[,ifelse(colnames(data_to_impute)==input[[1]]$target_names,FALSE,TRUE)]
# prepering arguments for function
col_type <- 1:ncol(data_to_impute)
for (i in col_type){
col_type[i] <- class(data_to_impute[,i])
}
percent_of_missing <- 1:ncol(data_to_impute)
for (i in percent_of_missing){
percent_of_missing[i] <- (sum(is.na(data_to_impute[,i]))/length(data_to_impute[,1]))*100
}
col_miss <- colnames(data_to_impute)[percent_of_missing>0]
col_no_miss <- colnames(data_to_impute)[percent_of_missing==0]
data_imputed <- autotune_missForest(data_to_impute,percent_of_missing = percent_of_missing,cores = self$param_set$values$cores,
ntree_set = self$param_set$values$ntree_set,mtry_set = self$param_set$values$mtry_set,
parallel = self$param_set$values$parallel,turn_off_parallel = self$param_set$values$turn_off_parallel,
col_0_1 = self$param_set$values$col_0_1,optimize = self$param_set$values$optimize,
ntree = self$param_set$values$ntree,mtry = self$param_set$values$mtry)
data_imputed <- cbind(data_imputed,target_col)
colnames(data_imputed)[ncol(data_imputed)] <- input[[1]]$target_names
if (input[[1]]$task_type=='classif'){
input[[1]] <- TaskClassif$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
if ( input[[1]]$task_type=='regr'){
input[[1]] <- TaskRegrf$new(input[[1]]$id,data_imputed,input[[1]]$target_names,positive =input[[1]]$positive )
}
return(input)
}
)
)
test =PipeOpmissForest$new()
test$param_set$values
document()
?mice
?missForest
library(EMMA)
?PipeOpmissForest
install.packages('Amelia2')
install.packages('Amelia')
test <- iris
for (i in 1:4){
d <- test[,i]
d[sample(50,1:150)] <- NA
test[,i] <- d
}
View(test)
test <- iris
for (i in 1:4){
d <- test[,i]
d[sample(50,1:150)] <- NA
test[,i] <- d
}
View(test)
sample(50,1:150)
test <- iris
for (i in 1:4){
d <- test[,i]
d[sample(1:150,50)] <- NA
test[,i] <- d
}
View(test)
library(Amelia)
test_amaelia <- amelia(test)
test_amaelia <- amelia(test,noms = 'Species')
View(test_amaelia)
summary.amelia(test_amaelia)
summary(test_amaelia)
test_amaelia <- amelia(test,noms = 'Species',empri = 0.15)
summary(test_amaelia)
View(test)
test_summary<- summary(test_amaelia)
test_summary<- summary(test_amaelia)
View(test_amaelia)
test_amaelia$iterHist[[1]]
length(test_amaelia$iterHist[[1]])
length(test_amaelia$iterHist[[1]][,1])
resoult <- 1:15
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
resoult
resoult <- 1:15
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
resoult <- 1:15
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
resoult
resoult
resoult
resoult <- 1:15
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
source('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/autotune_Amelia.R', echo=TRUE)
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
resoult
length(test_amaelia$iterHist[[1]][,1])
resoult <- 1:15
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
test_amaelia <- amelia(test,noms = 'Species',empri = 0.15)
length(test_amaelia$iterHist[[1]][,1])
resoult <- 1:15
for (i in 1:15){
mean  <-  0
amelia_iter <- amelia(test,noms = 'Species',empri = i/100)
for (j in 1:5){
mean <- mean + length(amelia_iter$iterHist[[j]][,1])
}
resoult[i] <- 0
mean <- mean/5
for (j in 1 :5){
resoult[i] <- resoult[i]+abs(mean-length(amelia_iter$iterHist[[j]][,1]))
}
}
test_amaelia <- amelia(test,noms = 'Species',empri = 0.15)
library(Amelia)
# libraries
library(OpenML)
source('./create_summary_json.R')
set.seed(123)
source <- 'openml'
# download data
list_all_openml_dataset <- listOMLDataSets()
openml_id <- list_all_openml_dataset[list_all_openml_dataset$name == 'cylinder-bands', 'data.id']
dataset_openml <- getOMLDataSet(data.id = openml_id)
data <- dataset_openml$data
target_column <- dataset_openml$target.features
# preprocessing
## encode missing data with the appropriate symbol
data[data == "?"] <- NA
## getting rid of irrelevant columns
data <- data[, -c(2,6,8,9,12,23)]
## Label-encoding
df <- data
label_cols <- c('customer', 'paper_type', 'ink_type', 'solvent_type', 'press_type', 'cylinder_size', 'paper_mill_location', 'grain_screened', 'proof_on_ctd_ink', 'type_on_cylinder')
for (col in label_cols){
df[, col] <- as.numeric(df[, col])
df[which(is.na(data[, col]), arr.ind = TRUE), col] <- NA
df[, col] <- as.factor(df[,col])
}
## Types conversion
df$job_number <- as.factor(df$job_number)
to_numeric <- c('ink_temperature', 'roughness', 'varnish_pct', 'solvent_pct', 'ink_pct', 'wax', 'hardener', 'anode_space_ratio')
to_integer <- c('blade_pressure', 'proof_cut', 'viscosity', 'ESA_Voltage', 'roller_durometer', 'current_density', 'chrome_content', 'humifity', 'press_speed')
for (col in to_numeric){
df[, col] <- as.numeric(df[, col])
}
for (col in to_integer) {
df[, col] <- as.integer(df[, col])
}
dataset <- df
## create json
file <- CreateSummary(data = df, target_column = target_column, id = openml_id, data_name = 'cylinder-bands', source = 'openml', added_by = 'ejowik')
write(file, 'dataset.json')
col_type <- 1 :34
for ( i in col_type){
col_type[i] <- class(data[,i])
amelia(data[,-1],noms = colnames(data[,-1])[ifelse(col_type[-1]=='factor',T,F)],parallel = 'multicore',empri = 5.4)
amelia(data[,-1],noms = colnames(data[,-1])[ifelse(col_type[-1]=='factor',T,F)],parallel = 'multicore',empri = 5.4)
