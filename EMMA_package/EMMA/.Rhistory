counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
groups <- groups[-1]
type <- type[-1]
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:length(col_type_simpler)-1)
flaga <- col_type_simpler[i+1]
if (flaga ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flaga !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
groups <- groups[-1]
type <- type[-1]
source('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:length(col_type_simpler)-1)
flaga <- col_type_simpler[i+1]
if (flaga ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flaga !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
groups <- groups[-1]
type <- type[-1]
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:length(col_type_simpler)-1){
flaga <- col_type_simpler[i+1]
if (flaga ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flaga !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:length(col_type_simpler)-1){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:length(col_type_simpler)-1){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:(length(col_type_simpler)-1)){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
missMDA_MFA <- function(df,col_type,percent_of_missing,random.seed=123,ncp =2 ,col_0_1=F){
#Creating gropus
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c('remove')
type <- c('remove')
counter <- 1
for (i in 1:(length(col_type_simpler)-1)){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
# Imputation
final <-  imputeMFA(df,group = as.numeric(gropus),type = type,ncp = ncp)$completeObs
# adding 0_1 columns
if (col_0_1){
columns_with_missing <-  (as.data.frame(is.na(df))*1)[,percent_of_missing>0]
colnames(columns_with_missing) <- paste(colnames(columns_with_missing),'where',sep='_')
final <- cbind(final,columns_with_missing)
}
return(final)
}
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
source('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
source('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
}}
groups <- groups[-1]
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
as.numeric(gropus)
as.integer(gropus)
as.integer(as.character(gropus))
as.integer(as.character(gropus))
as.integer(as.character(gropus))
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
missMDA_MFA <- function(df,col_type,percent_of_missing,random.seed=123,ncp =2 ,col_0_1=F){
#Creating gropus
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c(99999999)
type <- c('remove')
counter <- 1
for (i in 1:(length(col_type_simpler)-1)){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
# Imputation
final <-  imputeMFA(df,group = as.integer(as.character(gropus)),type = type,ncp = ncp,method = 'Regularized')$completeObs
# adding 0_1 columns
if (col_0_1){
columns_with_missing <-  (as.data.frame(is.na(df))*1)[,percent_of_missing>0]
colnames(columns_with_missing) <- paste(colnames(columns_with_missing),'where',sep='_')
final <- cbind(final,columns_with_missing)
}
return(final)
}
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
group = c(4,1)
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
View(test)
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
debugSource('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
imputeMFA(df,group = gropus,type = type,ncp = ncp,method = 'Regularized')$completeObs
# adding 0_1 columns
final <-  imputeMFA(df,group = c(4,1),type = type,ncp = ncp,method = 'Regularized')$completeObs
final <-  imputeMFA(df,group = c(4,1),type = c('s','n'),ncp = ncp,method = 'Regularized')$completeObs
final <-  imputeMFA(df,group = gropus,type = c('s','n'),ncp = ncp,method = 'Regularized')$completeObs
final <-  imputeMFA(df,group = c(gropus),type = c('s','n'),ncp = ncp,method = 'Regularized')$completeObs
c(gropus)
final <-  imputeMFA(df,group = groups,type = c('s','n'),ncp = ncp,method = 'Regularized')$completeObs
final <-  imputeMFA(df,group = groups,type = type,ncp = ncp,method = 'Regularized')$completeObs
m
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
missMDA_MFA <- function(df,col_type,percent_of_missing,random.seed=123,ncp =2 ,col_0_1=F){
#Creating gropus
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c(99999999)
type <- c('remove')
counter <- 1
for (i in 1:(length(col_type_simpler)-1)){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
# Imputation
final <-  imputeMFA(df,group = groups,type = type,ncp = ncp,method = 'Regularized')$completeObs
# adding 0_1 columns
if (col_0_1){
columns_with_missing <-  (as.data.frame(is.na(df))*1)[,percent_of_missing>0]
colnames(columns_with_missing) <- paste(colnames(columns_with_missing),'where',sep='_')
final <- cbind(final,columns_with_missing)
}
return(final)
}
wynik <-missMDA_MFA(test,col_type,percent_of_missing)
View(wynik)
wynik <-missMDA_MFA(test,col_type,percent_of_missing,col_0_1 = T)
View(wynik)
# libraries
library(OpenML)
source('./create_summary_json.R')
set.seed(123)
source <- 'openml'
# download data
list_all_openml_dataset <- listOMLDataSets()
openml_id <- list_all_openml_dataset[list_all_openml_dataset$name == 'cylinder-bands', 'data.id']
dataset_openml <- getOMLDataSet(data.id = openml_id)
data <- dataset_openml$data
target_column <- dataset_openml$target.features
# preprocessing
## encode missing data with the appropriate symbol
data[data == "?"] <- NA
## getting rid of irrelevant columns
data <- data[, -c(2,6,8,9,12,23)]
## Label-encoding
df <- data
label_cols <- c('customer', 'paper_type', 'ink_type', 'solvent_type', 'press_type', 'cylinder_size', 'paper_mill_location', 'grain_screened', 'proof_on_ctd_ink', 'type_on_cylinder')
for (col in label_cols){
df[, col] <- as.numeric(df[, col])
df[which(is.na(data[, col]), arr.ind = TRUE), col] <- NA
df[, col] <- as.factor(df[,col])
}
## Types conversion
df$job_number <- as.factor(df$job_number)
to_numeric <- c('ink_temperature', 'roughness', 'varnish_pct', 'solvent_pct', 'ink_pct', 'wax', 'hardener', 'anode_space_ratio')
to_integer <- c('blade_pressure', 'proof_cut', 'viscosity', 'ESA_Voltage', 'roller_durometer', 'current_density', 'chrome_content', 'humifity', 'press_speed')
for (col in to_numeric){
df[, col] <- as.numeric(df[, col])
}
for (col in to_integer) {
df[, col] <- as.integer(df[, col])
}
dataset <- df
## create json
file <- CreateSummary(data = df, target_column = target_column, id = openml_id, data_name = 'cylinder-bands', source = 'openml', added_by = 'ejowik')
write(file, 'dataset.json')
col_type <-1 :34
for (i in col_type){
col_type[i] <- class(dataset[,i])
}
percent_of_missing <-1 :34
for (i in percent_of_missing){
percent_of_missing[i] <- sum(is.na(dataset[,i]))/5.4
}
wynik <-missMDA_MFA(dataset,col_type,percent_of_missing)
source('~/Pulpit/Job_repo/EMMA/EMMA_package/EMMA/R/missMDA_MFA.R', echo=TRUE)
wynik <-missMDA_MFA(dataset,col_type,percent_of_missing)
print(groups)
missMDA_MFA <- function(df,col_type,percent_of_missing,random.seed=123,ncp =2 ,col_0_1=F){
#Creating gropus
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c(99999999)
type <- c('remove')
counter <- 1
for (i in 1:(length(col_type_simpler)-1)){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
print(groups)
# Imputation
final <-  imputeMFA(df,group = groups,type = type,ncp = ncp,method = 'Regularized')$completeObs
# adding 0_1 columns
if (col_0_1){
columns_with_missing <-  (as.data.frame(is.na(df))*1)[,percent_of_missing>0]
colnames(columns_with_missing) <- paste(colnames(columns_with_missing),'where',sep='_')
final <- cbind(final,columns_with_missing)
}
return(final)
}
wynik <-missMDA_MFA(dataset,col_type,percent_of_missing)
col_type_simpler <-  ifelse(col_type=='factor','n','s')
groups <- c(99999999)
type <- c('remove')
counter <- 1
for (i in 1:(length(col_type_simpler)-1)){
flag <- col_type_simpler[i+1]
if (flag ==col_type_simpler[i]){
counter <- counter +1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}
if (flag !=col_type_simpler[i]){
groups <- c(groups,counter)
type <- c(type,col_type_simpler[i])
counter <- 1
if (i +1 == length(col_type_simpler)){groups <- c(groups,counter)
type <- c(type,col_type_simpler[i+1])}
}}
groups <- groups[-1]
type <- type[-1]
wynik <-missMDA_MFA(dataset[1:50,],col_type,percent_of_missing)
wynik <-missMDA_MFA(dataset[1:50,,drop=F],col_type,percent_of_missing)
wynik <-missMDA_MFA(dataset[1:200,],col_type,percent_of_missing)
wynik <-missMDA_MFA(dataset,col_type,percent_of_missing)
View(wynik)
document()
document()
document()
?missMDA_MFA
remove.packages('EMMA')
library(devtools)
setwd('..')
install('EMMA/')
library(EMMA)
?missMDA_MFA
install.packages('missForest')
iris3
iris
test <-  irsis
for (i in 1:4){
d <- test[,i]
d[sample(1:150,50)] <- NA
test[,i] <- d
}
d[sample(1:150,50)]
test <-  irsis
for (i in 1:4){
d <- test[,i]
d[sample(1:150,50)] <- NA
test[,i] <- d
}
test <-  irsis
test <-  iris
for (i in 1:4){
d <- test[,i]
d[sample(1:150,50)] <- NA
test[,i] <- d
}
View(test)
test <-  iris
for (i in 1:5){
d <- test[,i]
d[sample(1:150,50)] <- NA
test[,i] <- d
}
View(test)
library(missForest)
wynik <- missForest(test)
View(wynik)
wynik <- missForest(test,ntree = 5000)
wynik <- missForest(test,ntree = 500)
View(wynik)
?missForest
wynik <- missForest(test,ntree = 500,verbose = T)
wynik <- missForest(test,ntree = 1000,verbose = T)
source('./create_summary_json.R')
# libraries
library(OpenML)
source('./create_summary_json.R')
set.seed(123)
source <- 'openml'
# download data
list_all_openml_dataset <- listOMLDataSets()
openml_id <- list_all_openml_dataset[list_all_openml_dataset$name == 'cylinder-bands', 'data.id']
dataset_openml <- getOMLDataSet(data.id = openml_id)
data <- dataset_openml$data
target_column <- dataset_openml$target.features
# preprocessing
## encode missing data with the appropriate symbol
data[data == "?"] <- NA
## getting rid of irrelevant columns
data <- data[, -c(2,6,8,9,12,23)]
## Label-encoding
df <- data
label_cols <- c('customer', 'paper_type', 'ink_type', 'solvent_type', 'press_type', 'cylinder_size', 'paper_mill_location', 'grain_screened', 'proof_on_ctd_ink', 'type_on_cylinder')
for (col in label_cols){
df[, col] <- as.numeric(df[, col])
df[which(is.na(data[, col]), arr.ind = TRUE), col] <- NA
df[, col] <- as.factor(df[,col])
}
## Types conversion
df$job_number <- as.factor(df$job_number)
to_numeric <- c('ink_temperature', 'roughness', 'varnish_pct', 'solvent_pct', 'ink_pct', 'wax', 'hardener', 'anode_space_ratio')
to_integer <- c('blade_pressure', 'proof_cut', 'viscosity', 'ESA_Voltage', 'roller_durometer', 'current_density', 'chrome_content', 'humifity', 'press_speed')
for (col in to_numeric){
df[, col] <- as.numeric(df[, col])
}
for (col in to_integer) {
df[, col] <- as.integer(df[, col])
}
dataset <- df
## create json
file <- CreateSummary(data = df, target_column = target_column, id = openml_id, data_name = 'cylinder-bands', source = 'openml', added_by = 'ejowik')
write(file, 'dataset.json')
wynik <- missForest(data,ntree = 1000,verbose = T)
wynik <- missForest(data[1:50,],ntree = 1000,verbose = T)
wynik <- missForest(data[1:50,],ntree = 1000,verbose = T)
wynik <- missForest(data[1:50,])
View(data)
wynik <- missForest(test)
# libraries
library(OpenML)
# libraries
library(OpenML)
source('create_summary_json.R')
# config
set.seed(1)
source <- 'openml'
# download data
list_all_openml_dataset <- listOMLDataSets()
openml_id <- 56L
data_name <- list_all_openml_dataset[list_all_openml_dataset[,'data.id'] == openml_id,'name']
dataset_openml <- getOMLDataSet(data.id = openml_id)
dataset_raw <- dataset_openml$data
target_column <- dataset_openml$target.features
# preprocessing
## cleaning types of columns, removing columns etc.
# all NA'a are alreay marked, all columns are somewhat balanced and all columns are factors
dataset <- dataset_raw
## create json only once
#summ <- CreateSummary(data = dataset, target_column = target_column, id = openml_id, data_name = data_name, source = 'openml', added_by = 'hazdula')
#write(summ, 'dataset.json')
wynik <- missForest(dataset)
View(dataset)
View(wynik)
wynik <- missForest(dataset,ntree = 500)
View(wynik)
wynik <- missForest(dataset,ntree = 500,parallelize = 'Forests')
wynik <- missForest(dataset,ntree = 500,parallelize = 'forests')
foreach()
library(doParallel)
makeCluster(4)
cl <- makeCluster(4)
registerDoParallel(cl)
wynik <- missForest(dataset,ntree = 500,parallelize = 'forests')
wynik <- missForest(dataset,ntree = 500,parallelize = 'no')
wynik <- missForest(dataset,ntree = 500,parallelize = 'variables')
wynik <- missForest(dataset,ntree = 500,parallelize = 'no')
?makeCluster
makeCluster(10)
makeCluster(100)
getDoParWorkers()
stopCluster(cl)
getDoParWorkers()
